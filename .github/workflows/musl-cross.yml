name: musl-cross

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Musl-cross version(e.g. 20230808)'
        required: true
      image_tag_version:
        description: 'Container image tag version(e.g. latest or 20230808)'
        required: true

env:
  REPO_NAME: 'musl-cross'

jobs:
  build:
    name: Building musl-cross docker images
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        triples:
          - {
              arch_type: 'aarch64-linux-musl',
              arch: 'aarch64'
            }
          - {
              arch_type: 'aarch64_be-linux-musl',
              arch: 'aarch64'
            }
          - {
              arch_type: 'arm-linux-musleabi',
              arch: 'arm'
            }
          - {
              arch_type: 'arm-linux-musleabihf',
              arch: 'arm'
            }
          - {
              arch_type: 'armeb-linux-musleabi',
              arch: 'armeb'
            }
          - {
              arch_type: 'armeb-linux-musleabihf',
              arch: 'armeb'
            }
          - {
              arch_type: 'armel-linux-musleabi',
              arch: 'armel'
            }
          - {
              arch_type: 'armel-linux-musleabihf',
              arch: 'armel'
            }
          - {
              arch_type: 'armv5l-linux-musleabi',
              arch: 'armv5l'
            }
          - {
              arch_type: 'armv5l-linux-musleabihf',
              arch: 'armv5l'
            }  
          - {
              arch_type: 'armv6-linux-musleabi',
              arch: 'armv6'
            }  
          - {
              arch_type: 'armv6-linux-musleabihf',
              arch: 'armv6'
            }  
          - {
              arch_type: 'armv7l-linux-musleabihf',
              arch: 'armv7l'
            }  
          - {
              arch_type: 'armv7m-linux-musleabi',
              arch: 'armv7m'
            }
          - {
              arch_type: 'armv7r-linux-musleabihf',
              arch: 'armv7r'
            } 
          - {
              arch_type: 'i486-linux-musl',
              arch: 'i486'
            } 
          - {
              arch_type: 'i686-linux-musl',
              arch: 'i686'
            }
          # - {
          #     arch_type: 'm68k-linux-musl',
          #     arch: 'm68k'
          #   } 
          # - {
          #     arch_type: 'microblaze-linux-musl',
          #     arch: 'microblaze'
          #   } 
          # - {
          #     arch_type: 'microblazeel-linux-musl',
          #     arch: 'microblazeel'
          #   } 
          - {
              arch_type: 'mips-linux-musl',
              arch: 'mips'
            }
          - {
              arch_type: 'mips-linux-muslsf',
              arch: 'mips'
            }
          - {
              arch_type: 'mips-linux-musln32sf',
              arch: 'mips'
            }
          - {
              arch_type: 'mips64-linux-musl',
              arch: 'mips64'
            }
          - {
              arch_type: 'mips64-linux-musln32',
              arch: 'mips64'
            }
          - {
              arch_type: 'mips64-linux-musln32sf',
              arch: 'mips64'
            }
          - {
              arch_type: 'mips64el-linux-musl',
              arch: 'mips64el'
            }
          - {
              arch_type: 'mips64el-linux-musln32',
              arch: 'mips64el'
            }
          - {
              arch_type: 'mips64el-linux-musln32sf',
              arch: 'mips64el'
            }
          - {
              arch_type: 'mipsel-linux-musl',
              arch: 'mipsel'
            }
          - {
              arch_type: 'mipsel-linux-musln32',
              arch: 'mipsel'
            }
          - {
              arch_type: 'mipsel-linux-musln32sf',
              arch: 'mipsel'
            }
          - {
              arch_type: 'mipsel-linux-muslsf',
              arch: 'mipsel'
            }
          # - {
          #     arch_type: 'or1k-linux-musl',
          #     arch: 'or1k'
          #   }
          - {
              arch_type: 'powerpc-linux-musl',
              arch: 'powerpc'
            }
          # - {
          #     arch_type: 'powerpc-linux-muslsf',
          #     arch: 'powerpc'
          #   }
          - {
              arch_type: 'powerpc64-linux-musl',
              arch: 'powerpc64'
            }
          - {
              arch_type: 'powerpc64le-linux-musl',
              arch: 'powerpc64le'
            }
          - {
              arch_type: 'powerpcle-linux-musl',
              arch: 'powerpcle'
            }
          # - {
          #     arch_type: 'powerpcle-linux-muslsf',
          #     arch: 'powerpcle'
          #   }
          # - {
          #     arch_type: 'riscv32-linux-musl',
          #     arch: 'riscv32'
          #   }
          - {
              arch_type: 'riscv64-linux-musl',
              arch: 'riscv64'
            }
          - {
              arch_type: 's390x-linux-musl',
              arch: 's390x'
            }
          - {
              arch_type: 'x86_64-linux-musl',
              arch: 'x86_64'
            }
          # - {
          #     arch_type: 'x86_64-linux-muslx32',
          #     arch: 'x86_64'
          #   }
          # - {
          #     arch_type: 'sh2-linux-musl',
          #     arch: 'sh2'
          #   }
          # - {
          #     arch_type: 'sh2-linux-muslfdpic',
          #     arch: 'sh2'
          #   }
          # - {
          #     arch_type: 'sh2eb-linux-musl',
          #     arch: 'sh2eb'
          #   }
          # - {
          #     arch_type: 'sh2eb-linux-muslfdpic',
          #     arch: 'sh2eb'
          #   }
          # - {
          #     arch_type: 'sh4-linux-musl',
          #     arch: 'sh4'
          #   }
          # - {
          #     arch_type: 'sh4eb-linux-musl',
          #     arch: 'sh4eb'
          #   }
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Prepare build
        id: prepare-build
        run: |
          VERSION=${{ matrix.triples.arch_type }}-${{ github.event.inputs.image_tag_version }}
          USER_NAME=bitsaver
          REPO_NAME=${{ env.REPO_NAME }}
          IMAGE_NAME=${{ matrix.triples.arch_type }}
          REGISTRY_NAME=quay.io
          TAGS="${REGISTRY_NAME}/${USER_NAME}/${REPO_NAME}:${VERSION}"
          echo "tags=${TAGS}" >> $GITHUB_OUTPUT

      - name: Login to Quay.io Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_BS_USERNAME }}
          password: ${{ secrets.QUAY_BS_ROBOT_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: ./
          file: ./Dockerfile
          platforms: 'linux/amd64'
          push: ${{ github.event_name != 'pull_request' }}
          build-args: |
            MUSL_CROSS_MAKE_GIT_TAG=v${{ github.event.inputs.version }}
            TRIPLE_TARGET=${{ matrix.triples.arch_type }}
          tags: ${{ steps.prepare-build.outputs.tags }}

      - name: Clear
        if: always()
        run: |
          rm -rf ${HOME}/.docker/config.json
